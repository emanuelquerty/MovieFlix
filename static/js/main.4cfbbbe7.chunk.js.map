{"version":3,"sources":["components/HomePageBanner/HomePageBanner.jsx","components/SmallMovieCard/SmallMovieCard.jsx","components/Popular/Popular.jsx","components/SmallSelectBar/SmallSelectBar.jsx","services/SearchMoviesService.js","pages/Home/Home.jsx","components/MovieDetailsBanner/MovieDetailsBanner.jsx","components/GenericCard/GenericCard.jsx","pages/MovieDetails/MovieDetails.jsx","components/NavBar/NavBar.jsx","components/MovieCard/MovieCard.jsx","components/SearchMoviesResults/SearchMoviesResults.jsx","components/SearchMoviesForm/SearchMoviesForm.jsx","components/SearchMoviesModal/SearchMoviesModal.jsx","components/BackDropShadow/BackDropShadow.jsx","App.js","serviceWorker.js","index.js"],"names":["HomePageBanner","props","className","withRouter","movie","history","onClick","movieOrTvShow","title","titleOrname","name","push","id","replace","src","poster_path","alt","release_date","first_air_date","vote_average","Popular","popular","filter","map","key","SmallSelectBar","useState","options","setOptions","optionsLabel","categories","activeState","index","newOptions","onSetCategory","getOptions","SearchMoviesService","this","baseUrl","apiKey","misc","event","query","preventDefault","url","fetch","res","json","console","error","category","movieOrTv","Home","popularMovies","setPopularMovies","movieCategory","setMovieCategory","popularTvShows","setPopularTvShows","tvShowCategory","setTvShowCategory","useEffect","getAll","then","data","results","hasOwnProperty","MovieDetailsBanner","production_countries","overview","tagline","iso_3166_1","origin_country","runtime","time","hours","Math","floor","minutes","getPrettyRuntime","seasons","length","GenericCard","smallTextArray","text","setMovie","movieCast","setmovieCast","pathnameArray","location","pathname","split","movieId","getMovieById","movieData","getFullCast","cast","profile_path","character","to","onOpenSearchMoviesModal","onCloseSearchMoviesModal","loading","substring","SearchMoviesResults","movies","SearchMovies","setQuery","onSubmit","searchMoviesService","getMoviesFromQuery","log","onSetMovies","type","placeholder","onChange","e","target","value","SearchMoviesModal","setMovies","computedClass","show","BackDropShadow","App","searchMoviesModalIsOpen","setSearchMoviesModalIsOpen","exact","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4cfbbbe7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./HomePageBanner.css\";\n\nconst HomePageBanner = (props) => {\n  return (\n    <div className=\"banner\">\n      <h2 className=\"banner__title\">Welcome</h2>\n      <p className=\"banner__description\">\n        All your movies and tv shows in one place.\n      </p>\n    </div>\n  );\n};\n\nexport default HomePageBanner;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./SmallMovieCard.css\";\n\n// This card is used in the Home Component for\n// holding a movie\nconst SmallMovieCard = (props) => {\n  const { movie, history } = props;\n\n  function showMovieDetailsPage() {\n    let movieOrTvShow = movie.title ? \"movie\" : \"tv\";\n    let titleOrname = movie.title || movie.name;\n\n    const regex = / /gi; // regex for matching all instances of single spaces\n    history.push(\n      `/${movieOrTvShow}/${movie.id}-${titleOrname.replace(regex, \"-\")}`\n    );\n  }\n\n  return (\n    <div className=\"small-card\" onClick={showMovieDetailsPage}>\n      <img\n        className=\"small-card__image\"\n        src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n        alt={movie.title + \"poster\"}\n      />\n      <div className=\"small-card__content\">\n        <h3 className=\"small-card__title\">{movie.title || movie.name}</h3>\n        <p className=\"small-card__release-date\">\n          <small>\n            {movie.release_date\n              ? \"Release Date: \" + movie.release_date\n              : \"First Air Date: \" + movie.first_air_date}\n          </small>\n        </p>\n        <p className=\"small-card__rating\">\n          <small>Rating: {movie.vote_average}</small>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(SmallMovieCard);\n","import React from \"react\";\nimport \"./Popular.css\";\nimport SmallMovieCard from \"../SmallMovieCard/SmallMovieCard.jsx\";\n\n// This component is used in the Home Component for holding the list\n// of popular movies, wether that is \"For Rent\", \"In Theathers\", etc.\nconst Popular = ({ popular }) => {\n  return (\n    <div className=\"popular\">\n      {popular\n        .filter((movie) => movie.poster_path)\n        .map((movie) => {\n          return <SmallMovieCard key={movie.id} movie={movie} />;\n        })}\n    </div>\n  );\n};\n\nexport default Popular;\n","import React, { useState } from \"react\";\nimport \"./SmallSelectBar.css\";\n\nconst SmallSelectBar = (props) => {\n  // This state is for enabling background color\n  // on the currently selected option (true). All other\n  // options get their background disabled (false)\n  const [options, setOptions] = useState([true, false, false]);\n\n  // This method return a list of nav options with the current\n  // selected state based on options state\n  function getOptions() {\n    let className = \"select-category__option \";\n    let { optionsLabel, categories } = props;\n\n    return options.map((activeState, index) => {\n      return (\n        <span\n          key={index}\n          className={\n            activeState // active state tells which option to enable and which to disable\n              ? (className += \"select-category__option--active\")\n              : (className = \"select-category__option \")\n          }\n          onClick={() => {\n            let newOptions = [false, false, false];\n\n            // Update the options state\n            newOptions[index] = true;\n            setOptions(newOptions);\n\n            // Change the movie/tv-show caregory to display, i.e popular, now_playing, etc;\n            // This trigger fetching of moves from this new category in Home.js component\n            props.onSetCategory(categories[index]);\n          }}\n        >\n          {/* Now we display each option, i.e For Rent, In Theathers, etc */}\n          {optionsLabel[index]}\n        </span>\n      );\n    });\n  }\n\n  return <nav className=\"popular-header__select-category\">{getOptions()}</nav>;\n};\n\nexport default SmallSelectBar;\n","class SearchMoviesService {\n  constructor() {\n    this.baseUrl = \"https://api.themoviedb.org/3\";\n    this.apiKey = \"a5d9da0bec0cbce6fa2abb066af3d2a2\";\n    this.misc = \"include_adult=false&language=en-US&page=1\";\n  }\n  async getMoviesFromQuery(event, query) {\n    event.preventDefault();\n\n    const url = `${this.baseUrl}/search/movie?api_key=${this.apiKey}&query=${query}&${this.misc}`;\n\n    try {\n      const res = await fetch(url);\n      return res.json();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getAll(category, movieOrTv) {\n    const url = `${this.baseUrl}/${movieOrTv}/${category}?api_key=${this.apiKey}&${this.misc}`;\n\n    try {\n      const res = await fetch(url);\n      return res.json();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getMovieById(id, movieOrTv) {\n    const url = `${this.baseUrl}/${movieOrTv}/${id}?api_key=${this.apiKey}&${this.misc}`;\n\n    try {\n      const res = await fetch(url);\n      return res.json();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getFullCast(id, movieOrTv) {\n    const url = `${this.baseUrl}/${movieOrTv}/${id}/credits?api_key=${this.apiKey}&${this.misc}`;\n\n    try {\n      const res = await fetch(url);\n      return res.json();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n\nexport default SearchMoviesService;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Home.css\";\nimport HomePageBanner from \"../../components/HomePageBanner/HomePageBanner.jsx\";\nimport Popular from \"../../components/Popular/Popular.jsx\";\nimport SmallSelectBar from \"../../components/SmallSelectBar/SmallSelectBar.jsx\";\nimport SearchMoviesService from \"../../services/SearchMoviesService\";\n\nconst Home = (props) => {\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [movieCategory, setMovieCategory] = useState(\"popular\");\n  const [popularTvShows, setPopularTvShows] = useState([]);\n  const [tvShowCategory, setTvShowCategory] = useState(\"popular\");\n\n  // UseEffect for getting the list of popular movies\n  useEffect(() => {\n    const popular = new SearchMoviesService();\n    popular.getAll(movieCategory, \"movie\").then((data) => {\n      setPopularMovies(data.results);\n    });\n  }, [movieCategory]);\n\n  // UseEffect for getting the list of popular tv shows\n  useEffect(() => {\n    const popular = new SearchMoviesService();\n    popular.getAll(tvShowCategory, \"tv\").then((data) => {\n      if (data.hasOwnProperty(\"results\")) {\n        setPopularTvShows(data.results);\n      } else {\n        setPopularTvShows([data]);\n      }\n    });\n  }, [tvShowCategory]);\n\n  let movieOptionsLabel = [\"For Rent\", \"In Theathers\", \"Top Rated\"];\n  let movieCategories = [\"popular\", \"now_playing\", \"top_rated\"];\n\n  let tvShowsOptionsLabel = [\"For Rent\", \"Latest\", \"Top Rated\"];\n  let tvShowsCategories = [\"popular\", \"latest\", \"top_rated\"];\n\n  return (\n    <div className=\"homepage\">\n      <HomePageBanner />\n      <main className=\"homepage__main\">\n        {/* Popular Movies Right Now */}\n        <h2 className=\"popular-header__popular-title\">\n          Popular movies right now\n        </h2>\n        <SmallSelectBar\n          onSetCategory={setMovieCategory}\n          optionsLabel={movieOptionsLabel}\n          categories={movieCategories}\n        />\n        {<Popular popular={popularMovies} />}\n\n        {/* Popular TV Shows Right Now */}\n        <h2 className=\"popular-header__popular-title\">\n          Popular tv shows right now\n        </h2>\n        <SmallSelectBar\n          onSetCategory={setTvShowCategory}\n          optionsLabel={tvShowsOptionsLabel}\n          categories={tvShowsCategories}\n        />\n        {<Popular popular={popularTvShows} />}\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./MovieDetailsBanner.css\";\n\n// This is component is used in the MovieDetails Page to\n// display the big movie banner\nconst MovieDetailsBanner = (props) => {\n  let { movie } = props;\n\n  let { poster_path, production_countries, overview, tagline } = movie;\n\n  // Given a runtime number in minutes,\n  // returns the pretty equivalent in hours and minutes\n  function getPrettyRuntime(time) {\n    let hours = Math.floor(time / 60);\n    let minutes = time % 60;\n\n    return `${hours}h ${minutes}m`;\n  }\n\n  return (\n    <div className=\"movie-details-banner\">\n      <img\n        className=\"movie-details-banner__image\"\n        src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n        alt={movie.title || movie.name + \"poster\"}\n      />\n      <div className=\"movie-details-banner__content\">\n        <h2 className=\"movie-details-banner__title\">\n          {movie.title || movie.name}\n        </h2>\n        <p className=\"movie-details-banner__release-date\">\n          {movie.release_date || movie.first_air_date}\n\n          {production_countries && production_countries[0]\n            ? ` (${production_countries[0].iso_3166_1})`\n            : ` ${movie.origin_country}`}\n\n          {movie.runtime\n            ? ` . ${getPrettyRuntime(movie.runtime)}`\n            : movie.seasons && ` . ${movie.seasons.length} seasons`}\n        </p>\n        <p className=\"movie-details-banner__tagline\">{tagline}</p>\n        <h2 className=\"movie-details-banner__overview-title\">Overview</h2>\n        <p className=\"movie-details-banner__overview\">{overview}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieDetailsBanner;\n","import React from \"react\";\nimport \"./GenericCard.css\";\n\n// This Card is used on the MovieDetails component\n// for holding the movie cast\nconst GenericCard = (props) => {\n  const { title, smallTextArray, poster_path } = props;\n\n  return (\n    <div className=\"generic-card\">\n      <img\n        className=\"generic-card__image\"\n        src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n        alt={title + \" poster\"}\n      />\n      <div className=\"generic-card__content\">\n        <h3 className=\"generic-card__title\">{title}</h3>\n        {smallTextArray.map((text, index) => {\n          return (\n            <p key={index} className=\"generic-card__small-text\">\n              <small>{text}</small>\n            </p>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default GenericCard;\n","import React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./MovieDetails.css\";\nimport MovieDetailsBanner from \"../../components/MovieDetailsBanner/MovieDetailsBanner.jsx\";\nimport SearchMoviesService from \"../../services/SearchMoviesService\";\nimport GenericCard from \"../../components/GenericCard/GenericCard.jsx\";\n\nconst MovieDetails = (props) => {\n  // State variables\n  let [movie, setMovie] = useState([]);\n  let [movieCast, setmovieCast] = useState([]);\n\n  // Get the movieId from pathname\n  const { location } = props;\n  let pathnameArray = location.pathname.split(\"/\");\n  let movieOrTv = pathnameArray[1];\n  let movieId = pathnameArray[2].split(\"-\")[0];\n\n  // UseEffect for getting the movie banner info\n  useEffect(() => {\n    let searchMoviesService = new SearchMoviesService();\n    searchMoviesService.getMovieById(movieId, movieOrTv).then((movieData) => {\n      setMovie(movieData);\n    });\n  }, [movieId, movieOrTv]);\n\n  // UseEffect for getting the full cast\n  // UseEffect for getting the movie banner info\n  useEffect(() => {\n    let searchMoviesService = new SearchMoviesService();\n    searchMoviesService.getFullCast(movieId, movieOrTv).then((data) => {\n      setmovieCast(data.cast);\n    });\n  }, [movieId, movieOrTv]);\n\n  return (\n    <div className=\"movie-details\">\n      <MovieDetailsBanner movie={movie} />\n\n      <div className=\"movie-details__cast\">\n        <h2 className=\"cast__title\">Top Cast</h2>\n        <div className=\"cast__list\">\n          {movieCast\n            .filter((cast) => cast.profile_path)\n            .map((cast, index) => {\n              let { name, character, profile_path } = cast;\n              return (\n                <GenericCard\n                  key={index}\n                  title={name}\n                  smallTextArray={[character]}\n                  poster_path={profile_path}\n                />\n              );\n            })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(MovieDetails);\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport \"./NavBar.css\";\nimport Search from \"@material-ui/icons/Search\";\n\nconst NavBar = (props) => {\n  function openSearchMoviesModal() {\n    props.onOpenSearchMoviesModal();\n  }\n\n  return (\n    <nav className=\"navbar\">\n      <Link to=\"/\" className=\"navbar__link app-title\" id=\"app-title\">\n        MOVIEFLIX\n      </Link>\n      <Link to=\"/\" className=\"navbar__link home\">\n        Home\n      </Link>\n      {/* TO BE DONE SOON */}\n      {/* <Link to=\"/movies\" className=\"navbar__link\">\n        Movies\n      </Link>\n      <Link to=\"/tv-shows\" className=\"navbar__link\">\n        TV Shows\n      </Link> */}\n      <Link\n        to={props.location.pathname}\n        className=\"navbar__link\"\n        onClick={openSearchMoviesModal}\n      >\n        <Search className=\"navbar__search-icon\" />\n      </Link>\n    </nav>\n  );\n};\n\nexport default withRouter(NavBar);\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./MovieCard.css\";\n\n// This Movie Card is used on the SearchMoviesModal Component\n// that opens when user presses the search icon\nfunction MovieCard(props) {\n  const { movie, history } = props;\n\n  // Called when user clicks a movie card\n  function showMovieDetailsPage() {\n    history.push(`/movie/${movie.id}-${movie.title.replace(\" \", \"-\")}`);\n  }\n\n  return (\n    <div\n      className=\"card\"\n      onClick={() => {\n        showMovieDetailsPage();\n        props.onCloseSearchMoviesModal();\n      }}\n    >\n      <img\n        className=\"card__image\"\n        src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n        alt={movie.title + \"poster\"}\n        loading=\"lazy\"\n      />\n      <div className=\"card__content\">\n        <h3 className=\"content__title\">{movie.title}</h3>\n        <p className=\"content__small\">\n          <small>Release Date: {movie.release_date}</small>\n        </p>\n        <p className=\"content__small\">\n          <small>Rating: {movie.vote_average}</small>\n        </p>\n        <p className=\"content__description\">{`${movie.overview.substring(\n          0,\n          100\n        )}...`}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(MovieCard);\n","import React from \"react\";\nimport \"./SearchMoviesResults.css\";\nimport MovieCard from \"../MovieCard/MovieCard.jsx\";\n\n// This component holds the list of movie results in the\n// SearchMoviesModal\nexport default function SearchMoviesResults(props) {\n  const movies = props.movies;\n  return (\n    <div className=\"card-list\">\n      {movies && movies.length !== 0\n        ? movies\n            .filter((movie) => movie.poster_path)\n            .map((movie) => (\n              <MovieCard\n                key={movie.id}\n                movie={movie}\n                onCloseSearchMoviesModal={props.onCloseSearchMoviesModal}\n              />\n            ))\n        : movies && (\n            <h2 className=\"no-movie-entered-message\">\n              Enter a valid movie name\n            </h2>\n          )}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./SearchMoviesForm.css\";\nimport SearchMoviesService from \"../../services/SearchMoviesService\";\n\n// This is the form component in the SearchMoviesModal\nexport default function SearchMovies(props) {\n  // states - input queries, movies\n  const [query, setQuery] = useState(\"\");\n\n  // Called when user presses the search button\n  function getMovies(event) {\n    const searchMoviesService = new SearchMoviesService();\n\n    if (!query) {\n      event.preventDefault();\n      props.onSetMovies([]);\n    } else {\n      searchMoviesService.getMoviesFromQuery(event, query).then((data) => {\n        console.log(data);\n        props.onSetMovies(data.results);\n      });\n    }\n  }\n\n  return (\n    <form className=\"form\" onSubmit={getMovies}>\n      <input\n        type=\"text\"\n        name=\"query\"\n        placeholder=\"i.e jurassic park\"\n        onChange={(e) => setQuery(e.target.value)}\n        value={query}\n      />\n      <button type=\"submit\" className=\"button\">\n        Search\n      </button>\n    </form>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./SearchMoviesModal.css\";\nimport SearchMoviesResults from \"../SearchMoviesResults/SearchMoviesResults.jsx\";\nimport SearchMoviesForm from \"../SearchMoviesForm/SearchMoviesForm.jsx\";\n\n// This is the modal that pops up when the user clicks the search icon\nconst SearchMoviesModal = (props) => {\n  const [movies, setMovies] = useState(null);\n  let computedClass = \"search-movies-modal\";\n\n  props.show\n    ? (computedClass += \" search-movies-modal--show\")\n    : (computedClass += \" search-movies-modal--hide\");\n\n  return (\n    <div className={computedClass}>\n      <SearchMoviesForm onSetMovies={setMovies} />\n      <SearchMoviesResults\n        movies={movies}\n        onCloseSearchMoviesModal={() => props.onCloseSearchMoviesModal(false)}\n      />\n    </div>\n  );\n};\n\nexport default SearchMoviesModal;\n","import React from \"react\";\nimport \"./BackDropShadow.css\";\n\nconst BackDropShadow = (props) => {\n  let computedClass = \"backdrop-shadow\";\n\n  props.show\n    ? (computedClass += \" backdrop-shadow--show\")\n    : (computedClass += \" backdrop-shadow--hide\");\n\n  return (\n    <div\n      className={computedClass}\n      onClick={() => props.onCloseSearchMoviesModal()}\n    >\n      Here\n    </div>\n  );\n};\n\nexport default BackDropShadow;\n","import React, { useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./pages/Home/Home.jsx\";\nimport MovieDetails from \"./pages/MovieDetails/MovieDetails.jsx\";\nimport NavBar from \"./components/NavBar/NavBar.jsx\";\nimport SearchMoviesModal from \"./components/SearchMoviesModal/SearchMoviesModal.jsx\";\nimport BackDropShadow from \"./components/BackDropShadow/BackDropShadow.jsx\";\n\nfunction App() {\n  const [searchMoviesModalIsOpen, setSearchMoviesModalIsOpen] = useState(false);\n\n  return (\n    <div className=\"app\">\n      <NavBar\n        onOpenSearchMoviesModal={() => setSearchMoviesModalIsOpen(true)}\n      />\n      <main>\n        <Switch>\n          <Route exact path=\"/\" render={() => <Home />} />\n        </Switch>\n        <Switch>\n          <Route exact path=\"/movie/:id\" render={() => <MovieDetails />} />\n        </Switch>\n        <Switch>\n          <Route exact path=\"/tv/:id\" render={() => <MovieDetails />} />\n        </Switch>\n      </main>\n      <SearchMoviesModal\n        show={searchMoviesModalIsOpen}\n        onCloseSearchMoviesModal={() => setSearchMoviesModalIsOpen(false)}\n      />\n      <BackDropShadow\n        show={searchMoviesModalIsOpen}\n        onCloseSearchMoviesModal={() => setSearchMoviesModalIsOpen(false)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}